using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;

namespace SuperDoku
{
    /// <summary>
    /// The playing field that contains the Board and the SelectionBar.
    /// </summary>
    public partial class Field : UserControl
    {
        Bitmap mBackground;
        
        /// <summary>
        /// Creates a new Field.
        /// </summary>
        public Field()
        {
            InitializeComponent();

            mSelectionBar.Grid.SelectedSquareChanged += new SelectedSquareChangedHandler(mBoard.selectionBar_SelectedSquareChanged);
            //both the Board and SelectionBar need to respond to SquareValueChanged events generated by the Board
            mBoard.Grid.SquareValueChanged += new SquareValueChangedHandler(mBoard.board_SquareValueChanged);
            mBoard.Grid.SquareValueChanged += new SquareValueChangedHandler(mSelectionBar.board_SquareValueChanged);

            mBackground = new Bitmap(Width, Height);
        }


        //oddly, we lack a Load function, so we'll use ParentChanged.
        private void Field_ParentChanged(object sender, EventArgs e)
        {
            ResizeField();
        }

        #region Properties

        public Board Board { get { return mBoard; } }
        public SelectionBar SelectionBar { get { return mSelectionBar; } }

        public SelectionBarPositions SelectionBarPosition
        {
            get
            {
                if (Settings.Layout.ChooseBestSettings)
                {
                    return (Width < Height) ? SelectionBarPositions.Bottom : SelectionBarPositions.Right;
                }
                else
                {
                    return Settings.Layout.SelectionBarPosition;
                }
            }
        }

        #endregion Properties


        #region Functions

        protected override void OnPaintBackground(PaintEventArgs e)
        {
            base.OnPaintBackground(e);
            e.Graphics.DrawImage(mBackground, 0, 0);
        }

        /// <summary>Applies the correct Style to all Squares on the Board and SelectionBar</summary>
        private void ApplyStyleToAll()
        {
            mBoard.ApplyStyle();
            mSelectionBar.ApplyStyle();
        }

        #endregion Functions


        
        #region Events

        private void Field_KeyDown(object sender, KeyEventArgs e)
        {
            Field_OnKeyDown(sender, e);
        }

        /// <summary>Called on the KeyDown event of the Board, SelectionBar and this Field. Ensures that this happens no matter which control has focus.</summary>
        public void Field_OnKeyDown(object sender, KeyEventArgs e)
        {
            
        }

        #endregion Events

        #region Event Throws


        #endregion Event Throws

    }
}